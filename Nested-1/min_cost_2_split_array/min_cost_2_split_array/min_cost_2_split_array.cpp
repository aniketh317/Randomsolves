// min_cost_2_split_array.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;
class Solution {
public:
    int minCost(vector<int>& nums, int k) {
        int n = nums.size();
        vector<unordered_map<int, int>>trim(n);
        vector<vector<int>>ival(n);
        for (int i = 0; i < n; i++)
            ival[i].resize(n - i + 1, k);//ival[i][l] is the importance val of nums[i:i+l-1]
        for (int i = 0; i < n; i++)
            trim[i][nums[i]] = 1;

        for (int l = 2; l <= n; l++)
        {
            for (int i = 0; i <= n - l; i++)
            {
                ival[i][l] = ival[i][l - 1];
                unordered_map<int,int>::iterator itr = trim[i].find(nums[i + l - 1]);
                if (itr != trim[i].end())
                {
                    itr->second++;
                    ival[i][l]++;
                    if (itr->second == 2)
                        ival[i][l]++;
                }
                else
                    trim[i][nums[i + l - 1]] = 1;
            }
        }
        vector<int>dp(n);//dp[i] is the min possible split for nums[0:i]
        dp[0] = k;
        for (int i = 1; i < n; i++)
        {
            dp[i] = ival[0][i + 1];
            for (int j = 1; j <= i; j++)
                dp[i] = (dp[i] > dp[j - 1] + ival[j][i - j + 1]) ? dp[j - 1] + ival[j][i - j + 1] : dp[i];
        }
        return dp[n - 1];
    }
};

int main()
{
    Solution sol;
    vector<int>nums{ 295,957,147,12,817,593,673,257,467,89,997,33,927,422,509,927,56,682,757,356,417,464,993,894,103,62,595,959,790,32,680,156,424,567,740,620,391,437,600,145,670,498,11,897,171,512,300,380,849,853,518,819,586,159,396,312,662,936,913,574,359,64,504,473,144,483,369,27,227,682,637,290,671,407,406,43,520,744,4,163,855,641,662,319,525,700,321,479,683,366,686,25,394,162,264,176,843,416,876,966,941,213,69,332,681,79,247,361,106,781,227,586,477,438,213,633,736,745,753,491,835,848,782,985,272,178,142,624,138,174,374,480,954,702,475,971,267,490,212,10,359,148,468,156,929,821,633,646,411,322,865,695,904,394,398,438,819,434,622,623,452,868,888,801,747,58,41,909,4,744,195,940,347,481,261,280,939,957,899,116,369,77,211,531,983,994,697,574,145,363,68,719,234,263,526,740,111,813,826,157,712,782,258,742,282,796,858,787,694,538,706,723,938,532,54,239,329,57,572,13,884,309,779,857,659,656,891,615,854,552,578,569,198,167,619,111,614,298,923,880,662,771,888,790,432,240,335,30,760,377,926,312,665,128,12,466,783,795,586,663,456,616,164,757,246,668,136,550,779,128,300,954,27,511,324,336,922,823,715,632,41,350,342,990,70,380,93,586,798,316,530,315,744,145,724,445,639,425,492,263,899,863,734,151,350,143,804,18,526,642,587,825,892,523,423,278,63,882,282,81,910,37,6,948,335,115,448,79,965,895,84,745,585,584,242,472,565,863,519,265,231,559,493,554,887,605,629,467,638,853,254,503,141,187,655,177,694,195,427,531,630,966,819,240,39,381,445,829,802,556,900,531,689,373,954,946,625,36,358,474,796,162,767,650,650,618,777,23,450,854,637,4,751,278,684,154,683,700,467,566,605,307,290,787,423,13,661,25,550,975,733,79,410,315,274,880,366,352,742,677,707,918,39,928,894,548,561,125,529,802,25,800,378,365,200,515,892,60,865,407,203,935,483,906,163,22,255,399,471,868,121,743,824,905,866,23,660,389,142,147,922,224,971,379,591,90,78,523,145,557,523,229,263,189,64,842,439,453,794,428,804,229,997,72,319,437,719,954,346,725,941,818,519,837,559,4,487,534,901,691,505,649,415,788,970,691,701,416,935,783,365,420,992,537,293,457,102,982,330,768,74,19,757,944,907,966,25,927,405,996,537,243,37,882,575,339,210,588,310,63,238,118,675,851,119,554,982,791,754,798,339,844,991,720,898,732,684,125,620,700,999,878,242,350,155,935,960,588,418,431,100,522,558,233,744,780,670,255,320,48,568,880,574,785,283,787,474,453,25,804,423,536,722,267,503,446,503,596,402,573,8,375,853,287,702,717,719,306,39,206,883,394,416,641,550,409,483,109,950,931,371,335,911,495,267,256,595,703,713,653,23,222,222,564,814,78,593,361,366,911,143,143,486,545,156,260,257,14,559,290,154,672,898,47,39,638,284,792,489,790,64,80,927,969,851,495,972,561,939,726,372,275,118,692,741,124,739,489,821,317,486,491,31,527,168,844,225,173,843,858,947,985,308,359,623,814,113,75,872,603,782,804,158,694,944,887,527,919,913,735,462,117,852,326,588,929,674,755,894,590,278,1,291,391,736,117,643,420,639,791,283,301,41,102,578,576,144,181,938,538,306,223,15,673,502,681,186,289,542,937,652,248,305,844,798,330,365,78,851,248,77,831,629,440,657,482,551,793,10,855,690,297,856,710,537,852,976,87,700,519,732,932,429,902,70,42,931,878,378,990,175,637,7,373,53,902,493,114,731,379,311,96,293,603,466,593,151,52,659,428,364,748,726,397,938,809,342,805,616,843,936,726,687,39,467,311,672,80,999,265,515,975,450,888,859,892,651,531,593,528,881,874,43,789,418,888,444,60,924,67,638,487,310,595,937,897,355,422,407,281,18,230,766,341,133,791,810,757,930,269,538,301,353,577,43,212,65,694,837,955,301,26,640,946,100,602,442,140,330,269,583,66,682,441,761,912,969,194,536,568,319,439,937,120,647,505,947,733,329,379,505,207,601,759,57,477,753,822,267,33,402,643,444,118,561,489,925,724,292,936,346,703,916,229,934,655,697,230,391,569,772,297,244,282,313,57,369,308,835,479,367,261,742,108,31,114,12,810,463,996,575,492,643,448,629,291,313,945,621,889,637,562,611,635,887,660,810,656,159,420,672,115,772,402,716,444,47,546,544,206,478,251,505,88,373,224,938,346,372,61 };
    int k = 999999918;
    int ret = sol.minCost(nums, k);
    cout << "Min cost to split array : " << ret << endl;
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
